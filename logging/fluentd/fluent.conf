# junand 02.05.2020


# extracting container name: https://stackoverflow.com/questions/37143923/how-to-get-container-and-image-name-when-using-fluentd-for-docker-logging
# as alternative use this plugin (yet not tested): https://github.com/bwalex/fluent-plugin-docker-format/blob/master/lib/fluent/plugin/out_docker_format.rb
# regex checker: http://fluentular.herokuapp.com/

<system>
    # fatal, error, warn, info, debug, trace
    @log_level error
</system>

<source>
    @type tail
    ###@log_level trace
    path /var/lib/docker/containers/*/*-json.log
    pos_file /var/log/fluentd-docker.pos
    tag docker.*
    <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S
        time_type string
    </parse>
</source>

# determine container name etc.
<filter docker.var.lib.docker.containers.*.*.log>
    @type record_transformer
    enable_ruby
    <record>
        container ${id = tag.split('.')[5]; JSON.parse(IO.read("/var/lib/docker/containers/#{id}/config.v2.json"))["Name"][1..-1]}
        container_id ${tag_parts[5]}
        hostname ${hostname}
    </record>
</filter>

# tag event with container name
<match docker.var.lib.docker.containers.*.*.log>
    @type record_reformer
    tag log.${record["container"]}
</match>

#warning: 299 Elasticsearch-7.8.0-757314695644ea9a1dc2fecd26d1a43856725e65 "[types removal] Specifying types in bulk requests is deprecated."
<filter log.fluentd>
    @type grep
    <exclude>
        key log
        pattern /^warning: 299 Elasticsearch-(.*)$/
    </exclude>
</filter>

<filter log.nginx>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type nginx
    </parse>
</filter>

<match log.traefik>
    @type rewrite_tag_filter
    <rule>
        key log
        #pattern / level=([^ ]*) msg=/
        pattern /ms$/
        invert true
        tag log.traefik.log
    </rule>
    <rule>
        key log
        #pattern / level=([^ ]*) msg=/
        pattern /ms$/
        #invert true
        tag log.traefik.access
    </rule>
</match>

<match log.influxdb>
    @type rewrite_tag_filter
    <rule>
        key log
        pattern /^\[httpd\]/
        invert true
        tag log.influxdb.log
    </rule>
    <rule>
        key log
        pattern /^\[httpd\]/
        tag log.influxdb.access
    </rule>
</match>

# traefik log format https://docs.traefik.io/observability/access-logs/
<filter log.traefik.access>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^(?<remoteip>[^ ]*) - (?<username>[^ ]*) \[(?<ts>.*)\] "(?<method>[^ ]*) (?<url>[^ ]*) (?<protocol>[^ ]*)" (?<code>[^ ]*) (?<size>[^ ]*) "(?<referrer>[^ ]*)" "(?<agent>[^ ]*)" (?<count>[^ ]*) "(?<router>[^ ]*)" "(?<serverurl>[^ ]*)" (?<duration>[^ ]*)ms$/
    </parse>
</filter>

<filter log.traefik.log>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type json
    </parse>
</filter>

<filter log.hass>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^([^ ]*) ([^ ]*) (?<level>[^ ]*) \((?<thread>[^ ]*)\) \[(?<component>[^ ]*)\] (?<msg>.*)$/
    </parse>
</filter>

# https://docs.octoprint.org/en/master/configuration/logging_yaml.html
<filter log.octoprint>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /([^ ]*) - (?<component>[^ ]*) - (?<level>[^ ]*) - (?<msg>.*)$/
    </parse>
</filter>

<filter log.nodered>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^(.*) - \[(?<level>[^ ]*)\] \[(?<node>.*)\] (?<msg>.*)$/
    </parse>
</filter>

<filter log.grafana>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^t=(.*) lvl=(?<level>[^ ]*) msg="(?<msg>.*)" logger=(?<logger>[^ ]*) userId=(?<userid>[^ ]*) orgId=(?<orgid>[^ ]*) uname=(?<uname>[^ ]*) method=(?<method>[^ ]*) path=(?<path>[^ ]*) status=(?<status>[^ ]*) remote_addr=(?<remoteip>[^ ]*) time_ms=(?<time>[^ ]*) size=(?<size>[^ ]*) referer=(?<referer>[^ ]*)/
    </parse>
</filter>

<filter log.mosquitto>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^([^ ]*) (?<msg>.*)$/
    </parse>
</filter>

<filter log.watchtower>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^time="([^ ]*)" level=(?<level>[^ ]*) msg="(?<msg>.*)"$/
    </parse>
</filter>

<filter log.fluentd>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^(.*) \[(?<level>[^ ]*)\]:(?<msg>.*)$/
    </parse>
</filter>

<filter log.prometheus>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^level=(?<level>[^ ]*) ts=([^ ]*) caller=(?<caller>[^ ]*) component=(?<component>[^ ]*) msg="(?<msg>.*)"(.*)$/
    </parse>
</filter>

# https://docs.influxdata.com/influxdb/v1.8/administration/logs
<filter log.influxdb.log>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        #expression /^ts=(.*) lvl=(?<level>[^ ]*) msg="(?<msg>.*)" log_id=(?<logid>[^ ]*) engine=(?<engine>[^ ]*) trace_id=(?<traceid>[^ ]*) op_name=(?<opname>[^ ]*) op_event=(?<op_event>[^ ]*) op_elapsed=(?<op_elapsed>[^ ]*)ms$/
        expression /^ts=(.*) lvl=(?<level>[^ ]*) msg="(?<msg>.*)" log_id=(?<logid>[^ ]*) (?<info>.*)$/
    </parse>
</filter>

<filter log.influxdb.access>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type regexp
        expression /^\[httpd\] (?<hostip>[^ ]*) - (?<user>[^ ]*) \[(.*)\] "(?<method>[^ ]*) (?<url>[^ ]*) (?<protocol>[^ ]*) (?<code>[^ ]*) (?<size>[^ ]*) "(?<referrer>[^ ]*)" "(?<agent>[^ ]*)" (?<reqid>[^ ]*) (?<duration>[^ ]*)/
    </parse>
</filter>

<filter log.kibana>
    @type parser
    key_name log
    reserve_data true
    <parse>
        @type json
    </parse>
</filter>

# generate current time key with correct timezone for all events and add hostname field
<filter log.**>
    @type parser
    reserve_data true
    key_name log
    <parse>
        @type none
        message_key log
    </parse>
</filter>

# write events to db
<match log.**>
    @type copy
    # write debug logs
#    <store>
#        @type file
#        path /logs/${tag}/
#        <buffer tag>
#        </buffer>
#    </store>
    <store>
        @type elasticsearch
        @log_level error
        host elasticsearch
        port 9200
        include_tag_key true 
        logstash_format true
        logstash_prefix docker.${tag}
        logstash_dateformat %Y%m%d
        <buffer>
            flush_interval 10
        </buffer>
    </store>
</match>